"""
Example 4: Primary Cities Filtered and Sorted
Author: Ilyazbek T.
Description:
Filters primary cities with population > 10,000,000, sorts them alphabetically,
and prints in a single string format.
"""

from functools import reduce

data = [['Tokyo', 35676000, 'primary'],
        ['New York', 19354922, 'nan'],
        ['Mexico City', 19028000, 'primary'],
        ['Mumbai', 18978000, 'admin'],
        ['Sao Paulo', 18845000, 'admin'],
        ['Delhi', 15926000, 'admin'],
        ['Shanghai', 14987000, 'admin'],
        ['Kolkata', 14787000, 'admin'],
        ['Los Angeles', 12815475, 'nan'],
        ['Dhaka', 12797394, 'primary'],
        ['Buenos Aires', 12795000, 'primary'],
        ['Karachi', 12130000, 'admin'],
        ['Cairo', 11893000, 'primary'],
        ['Rio de Janeiro', 11748000, 'admin'],
        ['Osaka', 11294000, 'admin'],
        ['Beijing', 11106000, 'primary'],
        ['Manila', 11100000, 'primary'],
        ['Moscow', 10452000, 'primary'],
        ['Istanbul', 10061000, 'admin'],
        ['Paris', 9904000, 'primary']]

# Filter primary cities with population > 10,000,000
filtered_cities = filter(lambda city: city[1] > 10_000_000 and city[2] == 'primary', data)

# Extract city names
city_names = map(lambda city: city[0], filtered_cities)

# Sort alphabetically
sorted_cities = sorted(city_names)

# Combine names into string
cities_str = reduce(lambda acc, name: acc + ', ' + name, sorted_cities)

print(f"Cities: {cities_str}")
